openapi: 3.0.3
info:
  title: Swagger chl-msa-account - OpenAPI 3.0
  description: |-
    <div style="text-align: justify;">
      <h3>Challenge Develop - Banco Pichincha</h3>
      <p>This is a contract to manage account and movement data based on the OpenAPI 3.0 specification.This is a contract that uses the API First-Contract principle to standardize the creation of endpoints to be used in our service and improve the development of our APIs.</p>
    </div>
  termsOfService: http://swagger.io/terms/
  contact:
    email: clavijo-marcos@hotmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0 - SNAPSHOT

servers:
  - url: http://localhost:8081/api/v1
    description: service

paths:
  /accounts:
    get:
      tags:
        - account
      summary: Get all accounts
      description: Retrieve a list of all accounts
      operationId: getAllAccounts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
              examples:
                example-1:
                  value:
                    - account_number: 123456
                      account_type: "savings"
                      initial_balance: 1000.50
                      status: "true"
    post:
      tags:
        - account
      summary: Create a new account
      description: Create a new account with an Unique ID
      operationId: createAccount
      requestBody:
        description: Created account object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPersonRequest'
            examples:
              example-1:
                value:
                  account:
                    account_number: 123456
                    account_type: "savings"
                    initial_balance: 1000.50
                    status: "true"
                  person:
                    name: "John Doe"
                    gender: "male"
                    age: 30
                    identification: "1234567890"
                    address: "123 Main St"
                    phone: "555-1234"
                  customer:
                    password: "password123"
                    status: "true"
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              examples:
                example-1:
                  value:
                    account_number: 123456
                    account_type: "savings"
                    initial_balance: 1000.50
                    status: "true"
        '400':
          description: The server could not understand the request because of incorrect syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    title: "Bad Request"
                    detail: "The request could not be understood by the server due to malformed syntax."
                    status: 400
  /accounts/{accountNumber}:
    get:
      tags:
        - account
      summary: Get account by account number
      description: Retrieve a single account by its account number
      operationId: getAccountByAccountNumber
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              examples:
                example-1:
                  value:
                    account_number: 123456
                    account_type: "savings"
                    initial_balance: 1000.50
                    status: "true"
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    title: "Not Found"
                    detail: "Account not found"
                    status: 404
    put:
      tags:
        - account
      summary: Update an existing account
      description: Update an existing account by its account number
      operationId: updateAccount
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated account object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
            examples:
              example-1:
                value:
                  account_number: 123456
                  account_type: "savings"
                  initial_balance: 1000.50
                  status: "true"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              examples:
                example-1:
                  value:
                    account_number: 123456
                    account_type: "savings"
                    initial_balance: 1000.50
                    status: "true"
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    title: "Not Found"
                    detail: "Account not found"
                    status: 404
  /movements:
    get:
      tags:
        - movement
      summary: Get all movements
      description: Retrieve a list of all movements
      operationId: getAllMovements
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movement'
              examples:
                example-1:
                  value:
                    - id: 1
                      date: "2023-01-01"
                      movement_type: "deposit"
                      value: 500.00
                      balance: 1500.50
    post:
      tags:
        - movement
      summary: Create a new movement
      description: Create a new movement with an Unique ID
      operationId: createMovement
      requestBody:
        description: Created movement object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movement'
            examples:
              example-1:
                value:
                  id: 1
                  date: "2023-01-01"
                  movement_type: "deposit"
                  value: 500.00
                  balance: 1500.50
                  account_number: 123456
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movement'
              examples:
                example-1:
                  value:
                    id: 1
                    date: "2023-01-01"
                    movement_type: "deposit"
                    value: 500.00
                    balance: 1500.50
                    account_number: 123456
        '400':
          description: The server could not understand the request because of incorrect syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    title: "Bad Request"
                    detail: "The request could not be understood by the server due to malformed syntax."
                    status: 400
  /movements/{id}:
    get:
      tags:
        - movement
      summary: Get movement by ID
      description: Retrieve a single movement by its ID
      operationId: getMovementById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movement'
              examples:
                example-1:
                  value:
                    id: 1
                    date: "2023-01-01"
                    movement_type: "deposit"
                    value: 500.00
                    balance: 1500.50
        '404':
          description: Movement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    title: "Not Found"
                    detail: "Movement not found"
                    status: 404
    put:
      tags:
        - movement
      summary: Update an existing movement
      description: Update an existing movement by its ID
      operationId: updateMovement
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated movement object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movement'
            examples:
              example-1:
                value:
                  id: 1
                  date: "2023-01-01"
                  movement_type: "deposit"
                  value: 500.00
                  balance: 1500.50
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movement'
              examples:
                example-1:
                  value:
                    id: 1
                    date: "2023-01-01"
                    movement_type: "deposit"
                    value: 500.00
                    balance: 1500.50
        '404':
          description: Movement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    title: "Not Found"
                    detail: "Movement not found"
                    status: 404

components:
  schemas:
    Account:
      type: object
      properties:
        account_number:
          type: integer
          example: 123456
        account_type:
          type: string
          example: "savings"
        initial_balance:
          type: number
          format: double
          example: 1000.50
        status:
          type: string
          example: "true"
    Movement:
      type: object
      properties:
        id:
          type: integer
          example: 1
        date:
          type: string
          format: date
          example: "2023-01-01"
        movement_type:
          type: string
          example: "deposit"
        value:
          type: number
          format: double
          example: 500.00
        balance:
          type: number
          format: double
          example: 1500.50
        account_number:
          type: integer
          example: 123456
      required:
        - id
        - date
        - movement_type
        - value
        - balance
        - account_number
    Person:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        gender:
          type: string
          example: "male"
        age:
          type: integer
          example: 30
        identification:
          type: string
          example: "1234567890"
        address:
          type: string
          example: "123 Main St"
        phone:
          type: string
          example: "555-1234"
      required:
        - identification
    Customer:
      type: object
      properties:
        password:
          type: string
          example: "password123"
        status:
          type: string
          example: "true"
    AccountPersonRequest:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/Account'
        person:
          $ref: '#/components/schemas/Person'
        customer:
          $ref: '#/components/schemas/Customer'
    Error:
      type: object
      properties:
        title:
          type: string
          example: "Bad Request"
        detail:
          type: string
          example: "The request could not be understood by the server due to malformed syntax."
        status:
          type: integer
          example: 400