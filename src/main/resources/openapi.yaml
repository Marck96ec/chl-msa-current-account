openapi: 3.0.3
info:
  title: Swagger chl-msa-account - OpenAPI 3.0
  description: |-
    <div style="text-align: justify;">
      <h3>Challenge Develop - Banco Pichincha</h3>
      <p>This is a contract to manage account and movement data based on the OpenAPI 3.0 specification.This is a contract that uses the API First-Contract principle to standardize the creation of endpoints to be used in our service and improve the development of our APIs.</p>
    </div>
  termsOfService: http://swagger.io/terms/
  contact:
    email: clavijo-marcos@hotmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0 - SNAPSHOT

servers:
  - url: http://localhost:8081/api/v1
    description: service

paths:
  /accounts:
    get:
      tags:
        - account
      summary: Get all accounts
      description: Retrieve a list of all accounts
      operationId: getAllAccounts
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
              examples:
                example-1:
                  value:
                    - account_number: 123456
                      account_type: "savings"
                      initial_balance: 1000.50
                      status: "true"
    post:
      tags:
        - account
      summary: Create a new account
      description: Create a new account with an Unique ID
      operationId: createAccount
      requestBody:
        description: Created account object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPersonRequest'
            examples:
              example-1:
                value:
                  account:
                    account_number: 123456
                    account_type: "savings"
                    initial_balance: 0
                    status: "true"
                  person:
                    name: "John Doe"
                    gender: "masculino"
                    age: 30
                    identification: "1234567890"
                    address: "123 Main St"
                    phone: "5551234567"
                  customer:
                    password: "password123"
                    status: "true"
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              examples:
                example-1:
                  value:
                    account_number: 123456
                    account_type: "savings"
                    initial_balance: 1000.50
                    status: "true"
        '400':
          description: The server could not understand the request because of incorrect syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    title: "Bad Request"
                    detail: "The request could not be understood by the server due to malformed syntax."
                    status: 400
  /accounts/{accountNumber}:
    get:
      tags:
        - account
      summary: Get account by account number
      description: Retrieve a single account by its account number
      operationId: getAccountByAccountNumber
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              examples:
                example-1:
                  value:
                    account_number: 123456
                    account_type: "savings"
                    initial_balance: 1000.50
                    status: "true"
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    title: "Not Found"
                    detail: "Account not found"
                    status: 404
    patch:
      tags:
        - account
      summary: Update account status
      description: Update the status of an existing account by its account number
      operationId: updateAccountStatus
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated account status
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "true"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              examples:
                example-1:
                  value:
                    account_number: 123456
                    account_type: "savings"
                    initial_balance: 1000.50
                    status: "true"
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    title: "Not Found"
                    detail: "Account not found"
                    status: 404
  /movements:
    get:
      tags:
        - movement
      summary: Get all movements
      description: Retrieve a list of all movements
      operationId: getAllMovements
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movement'
              examples:
                example-1:
                  value:
                    - id: 1
                      date: "2023-01-01"
                      movement_type: "deposit"
                      value: 500.00
                      balance: 1500.50
    post:
      tags:
        - movement
      summary: Create a new movement
      description: Create a new movement with an Unique ID
      operationId: createMovement
      requestBody:
        description: Created movement object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movement'
            examples:
              MovementExample-1:
                $ref: '#/components/examples/MovementExample-1'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movement'
              examples:
                example-1:
                  value:
                    id: 1
                    date: "2023-01-01"
                    movement_type: "deposit"
                    value: 500.00
                    balance: 1500.50
                    account_number: 123456
        '400':
          description: The server could not understand the request because of incorrect syntax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    title: "Bad Request"
                    detail: "The request could not be understood by the server due to malformed syntax."
                    status: 400
  /movements/{id}:
    get:
      tags:
        - movement
      summary: Get movement by ID
      description: Retrieve a single movement by its ID
      operationId: getMovementById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Movement'
              examples:
                example-1:
                  value:
                    id: 1
                    date: "2023-01-01"
                    movement_type: "deposit"
                    value: 500.00
                    balance: 1500.50
        '404':
          description: Movement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    title: "Not Found"
                    detail: "Movement not found"
                    status: 404
    put:
      tags:
        - movement
      summary: Update an existing movement
      description: Update an existing movement by its ID
      operationId: updateMovement
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated movement object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movement'
            examples:
              example-1:
                value:
                  id: 1
                  date: "2023-01-01"
                  movement_type: "deposit"
                  value: 500.00
                  balance: 1500.50
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movement'
              examples:
                example-1:
                  value:
                    id: 1
                    date: "2023-01-01"
                    movement_type: "deposit"
                    value: 500.00
                    balance: 1500.50
        '404':
          description: Movement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example-1:
                  value:
                    title: "Not Found"
                    detail: "Movement not found"
                    status: 404
  /reports:
    get:
      tags:
        - reports
      summary: Get account statement
      description: Get the account statement of a client within a date range
      operationId: getAccountStatement
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Start date of the range
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
          description: End date of the range
        - name: clientId
          in: query
          required: true
          schema:
            type: integer
          description: Client ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountStatement'
              examples:
                AccountStatementExample-1:
                    $ref: '#/components/examples/AccountStatementExample-1'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'



components:
  schemas:
    AccountStatement:
      type: object
      properties:
        date:
          type: string
        client:
          type: string
        accountNumber:
          type: integer
        accountType:
          type: string
        initialBalance:
          type: number
          format: double
        status:
          type: boolean
        movement:
          type: number
          format: double
        availableBalance:
          type: number
          format: double
    Account:
      type: object
      properties:
        account_number:
          type: integer
        account_type:
          type: string
        initial_balance:
          type: number
          format: double
        status:
          type: string
    Movement:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
          format: date
        movement_type:
          type: string
        value:
          type: number
          format: double
        balance:
          type: number
          format: double
        account_number:
          type: integer
      required:
        - movement_type
        - value
        - account_number
    Person:
      type: object
      properties:
        name:
          type: string
        gender:
          type: string
        age:
          type: integer
        identification:
          type: string
        address:
          type: string
        phone:
          type: string
      required:
        - identification
    Customer:
      type: object
      properties:
        password:
          type: string
        status:
          type: string
    AccountPersonRequest:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/Account'
        person:
          $ref: '#/components/schemas/Person'
        customer:
          $ref: '#/components/schemas/Customer'
    Error:
      type: object
      properties:
        title:
          type: string
          example: "Bad Request"
        detail:
          type: string
          example: "The request could not be understood by the server due to malformed syntax."
        status:
          type: integer
          example: 400
  examples:
    MovementExample-1:
      value:
        movement_type: "deposit"
        value: 500.00
        account_number: 123456
    AccountStatementExample-1:
      value:
        date: "2023-01-01"
        client: "John Doe"
        accountNumber: 123456
        accountType: "savings"
        initialBalance: 1000.50
        status: "true"
        movement: 500.00
        availableBalance: 1500.50
